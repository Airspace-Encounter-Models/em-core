% Copyright 2018 - 2020, MIT Lincoln Laboratory
% SPDX-License-Identifier: BSD-2-Clause
%% Inputs
% Input File
inFile = [getenv('AEM_DIR_CORE') filesep 'data' filesep 'FAA-NASR' filesep 'Class_Airspace'];

% readAirspace parameters
keepClasses = ["B","C","D"]; % Airspace classes to keep,

% Countries to include in bounding box
iso_a2 = {'US','CA','MX','AW','AG','BB','BS','BM','CU','CW','JM','KY','PA','PR','TC','TT'};

% Output directory and name
outDir = [getenv('AEM_DIR_CORE') filesep 'output'];
outName = ['airspace-' sprintf('%c-',keepClasses) date];

% SQLite Database
database =  [outDir filesep outName '.db'];   % database file name
table    = 'airspace_table';  % sql table name

%% Define Bounding Box
% 2-by-2 matrix of [lonmin,latmin;lonmax,latmax] for geographic coordinates
% https://en.wikipedia.org/wiki/List_of_extreme_points_of_the_United_States
[latOut_deg,lonOut_deg] = genBoundaryIso3166A2('iso_a2',iso_a2,'mode','convhull','isPlot',false);

bbox = [min(lonOut_deg), min(latOut_deg); max(lonOut_deg), max(latOut_deg)];

%% Read Airspace
% FAA / United States (open source data)
airspaceUS = readAirspace('inFile',inFile,...
    'bbox_deg',bbox,'keepClasses',keepClasses);

% Canadian airspace (not open source, only do something if have data)
if 2 == exist([getenv('AEM_DIR_CORE') filesep 'data' filesep 'NRC-Airspace-FOUO' filesep 'March2020Airspace.mat'])
    airspaceCA = readAirspaceCanada('bbox_deg',bbox,'keepClasses',keepClasses);
    airspace = [airspaceUS;airspaceCA];
else
    airspace = airspaceUS;
end

fprintf('# airspaces: %i\n',size(airspace,1));

%% Save to MATLAB .mat file
% Save data twice, one with a filename with the date; the other with a
% default filename without a date to be called by other functions
save([outDir filesep outName '.mat'],'inFile','airspace','iso_a2','bbox','keepClasses');
save([outDir filesep 'airspace' '.mat'],'inFile','airspace','iso_a2','bbox','keepClasses');

%% Save to SQLite
% Delete database file, if it still exists
% mksqlite('close');
% try
%     delete( database );
% catch
%     error( 'Unable to delete database' );
% end
% 
% % Open (creates a new) database
% mksqlite( 'open', database );
% 
% % Create table
% fprintf( 'Create new table, %s, in %s database\n',table,database);
% mksqlite( ['CREATE TABLE ' table        , ...
%     '  (  class       CHAR(1), ' , ...
%     '    name        TEXT, ' , ...
%     '    bbox_min_lat_deg        DOUBLE, ' , ...
%     '    bbox_min_lon_deg        DOUBLE, ' , ...
%     '    bbox_max_lat_deg        DOUBLE, ' , ...
%     '    bbox_max_lon_deg        DOUBLE, ' , ...
%     '    alt_low_ft_msl          INTEGER, ' , ...
%     '    alt_high_ft_msl         INTEGER, ' , ...
%     '    elevation_src        TEXT, ' , ...
%     '    elevation_ft_msl          TEXT, ' , ...
%     '    alt_low_ft_agl          TEXT, ' , ...
%     '    alt_high_ft_agl         TEXT, ' , ...
%     '    lat_deg        TEXT, ' , ...
%     '    lon_deg       TEXT ) '] );
% 
% % Start transaction creation
% mksqlite( 'begin' );
% 
% % Iterate over rows and create transaction
% for i=1:1:size(airspace,1)
%     mksqlite( ['INSERT INTO ', table                     , ...
%         ' (class,name,bbox_min_lat_deg,bbox_min_lon_deg,bbox_max_lat_deg,bbox_max_lon_deg,alt_low_ft_msl,alt_high_ft_msl,elevation_src,elevation_ft_msl,alt_low_ft_agl,alt_high_ft_agl,lat_deg,lon_deg) '          , ...
%         '  VALUES('                               , ...
%         sprintf('"%s"',airspace.CLASS(i)) , ...
%         ','                          , ...
%         sprintf('"%s"',airspace.NAME(i)) , ...
%         ','                          , ...
%         sprintf('%f',airspace.BOUNDINGBOX_deg{i}(2)),...
%         ',',...
%         sprintf('%f',airspace.BOUNDINGBOX_deg{i}(1)),...
%         ',',...
%         sprintf('%f',airspace.BOUNDINGBOX_deg{i}(4)),...
%         ',',...
%         sprintf('%f',airspace.BOUNDINGBOX_deg{i}(3)),...
%         ',',...
%         sprintf('%i',airspace.LOWALT_ft_msl(i)),...
%         ',',...
%         sprintf('%i',airspace.HIGHALT_ft_msl(i)),...
%         ',',...
%         sprintf('"%s"',airspace.ELEVATION_src(i)) , ...
%         ',',...
%         '"',sprintf('%i,',airspace.ELEVATION_ft_msl{i}) ,'"' ...
%         ','                          , ...
%         '"',sprintf('%f,',airspace.LOWALT_ft_agl{i}) ,'"' ...
%         ','                          , ...
%         '"',sprintf('%f,',airspace.HIGHALT_ft_agl{i}) ,'"' ...
%         ','                          , ...
%         '"',sprintf('%f,',airspace.LAT_deg{i}) ,'"' ...
%         ','                          , ...
%         '"',sprintf('%f,',airspace.LON_deg{i}) ,'"' ...
%         '         )'                              ] );
% end
% 
% % Finalize transaction
% mksqlite( 'commit' );
% 
% % Close database connection
% mksqlite('close');
